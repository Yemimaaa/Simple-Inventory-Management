// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using InventoryTransactionsApp.EF;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using InventoryTransactionsApp.DAL;

namespace InventoryTransactionsApp.Models;

public partial class InventoryDbContext : DbContext
{
    public InventoryDbContext(DbContextOptions<InventoryDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }
    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //    //warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //    => optionsBuilder.UseSqlServer("Data Source=127.0.0.1,1455;Initial Catalog=InventoryDb;User ID=sa;Password=Password#123;TrustServerCertificate=True");

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<InventoryDbContext>(options =>
            options.UseSqlServer("Data Source=127.0.0.1,1455;Initial Catalog=InventoryDb;User ID=sa;Password=Password#123;TrustServerCertificate=True"));

        services.AddScoped<IProduct, ProductEF>();
        services.AddScoped<ITransaction, TransactionEF>();
        services.AddControllersWithViews();
    }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.Property(e => e.Date)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Product).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transactions_Products");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}